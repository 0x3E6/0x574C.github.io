<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x3E6的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://longwang.live/"/>
  <updated>2020-04-25T07:20:50.269Z</updated>
  <id>http://longwang.live/</id>
  
  <author>
    <name>0x3E6</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一种动态更新flink任务配置的方法</title>
    <link href="http://longwang.live/2020/04/25/%E4%B8%80%E7%A7%8D%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0flink%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://longwang.live/2020/04/25/%E4%B8%80%E7%A7%8D%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0flink%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-04-25T07:17:00.000Z</published>
    <updated>2020-04-25T07:20:50.269Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="1-原理">1  原理</span></h2><p> 参考<a href="https://www.cnblogs.com/littleCode/p/10362717.html" target="_blank" rel="noopener">Flink/Spark 如何实现动态更新作业配置</a>，讲得比较详细，这篇的文章的参考参考文献也可阅读一下。flink任务配置动态更新的实现方法，可通过添加一个控制流，将数据流与控制流连接后，再读取控制流中的消息来更新数据流处理逻辑中的参数，这样即实现了数据流处理逻辑中配置参数动态更新的方法，无需重启任务或修改代码。</p><h2><span id="2-例整数过滤">2 例，整数过滤</span></h2><p> 本例中，控制流发送的整数作为除数，如果数据流中的整数除以控制流中的整数余数为0，则将数据流中的数据向下游发送。</p><h3><span id="21-并行度为1">2.1  并行度为1</span></h3><p> 先设置并行为1，测试效果。定义2个数据源，一个dataStream产生数据流，其中数据为0到19，一个configStream产生控制流，向流中发送一个整数2。<br> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setParallelism(<span class="number">1</span>);</span><br><span class="line">DataStream&lt;Integer&gt; configStream = env.addSource(<span class="keyword">new</span> SourceFunction&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4529394264795596001L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Integer&gt; sourceContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sourceContext.collect(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">DataStream&lt;Integer&gt; dataStream = env.addSource(<span class="keyword">new</span> SourceFunction&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1885959149409672550L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Integer&gt; sourceContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; running &amp;&amp; i &lt; <span class="number">20</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            sourceContext.collect(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><br>连接数据流与控制流</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConnectedStreams connectedStreams = dataStream.connect(configStream);</span><br></pre></td></tr></table></figure></div><p>处理连接后的流，如下代码所示，先定义除数为1，processElement2函数处理的控制流发来的数据，接收到后更新除数的值；processElement1处理的数据流发来的数据，如果数据除以除数的余数为0，则通过collector发出去。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Integer&gt; resultStream = connectedStreams.process(<span class="keyword">new</span> CoProcessFunction&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8870659158532269705L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer divisor = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement1</span><span class="params">(Integer o, Context context, Collector&lt;Integer&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[Data] Received &#123;&#125;, divisor &#123;&#125;"</span>, o, divisor);</span><br><span class="line">        <span class="keyword">if</span> (o % divisor == <span class="number">0</span>) &#123;</span><br><span class="line">            collector.collect(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement2</span><span class="params">(Integer o, Context context, Collector&lt;Integer&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[Divisor] Received &#123;&#125;"</span>, o);</span><br><span class="line">        divisor = o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">resultStream.print();</span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure></div><p>主要输出如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 0, divisor 1</span><br><span class="line">0</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 1, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 2, divisor 2</span><br><span class="line">2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 3, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 4, divisor 2</span><br><span class="line">4</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 5, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 6, divisor 2</span><br><span class="line">6</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 7, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 8, divisor 2</span><br><span class="line">8</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 9, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 10, divisor 2</span><br><span class="line">10</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 11, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 12, divisor 2</span><br><span class="line">12</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 13, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 14, divisor 2</span><br><span class="line">14</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 15, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 16, divisor 2</span><br><span class="line">16</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 17, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 18, divisor 2</span><br><span class="line">18</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;1)] INFO test.flink.streaming.connectstream.Test2  - [Data] Received 19, divisor 2</span><br></pre></td></tr></table></figure></div><p>可见，数据流中的0到达时，除数仍为1,0被发出并打印出来。然后接收到控制流的2，除数被更新为2，后面数据流的数据只有偶数被打印出来。这已经实现了除数由1变为2的动态更新。</p><h3><span id="21-并行度大于1">2.1  并行度大于1</span></h3><p> 注释<code>env.setParallelism(1);</code>，flink默认设置的并行度与处理器核数相同，在上面<code>CoProcessFunction</code>匿名类的2个处理数据方法中打印相关信息的同时打印出线程id。输出结果如下：<br> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> [Co-Process -&gt; Sink: Print to Std. Out (2&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 81 received 4, divisor 1</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (4&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 83 received 6, divisor 1</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (8&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 87 received 10, divisor 1</span><br><span class="line">4&gt; 6</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (10&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 89 received 0, divisor 1</span><br><span class="line">8&gt; 10</span><br><span class="line">2&gt; 4</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (12&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 91 received 2, divisor 1</span><br><span class="line">10&gt; 0</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (7&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 86 received 9, divisor 1</span><br><span class="line">7&gt; 9</span><br><span class="line">12&gt; 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (3&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 82 received 5, divisor 1</span><br><span class="line">3&gt; 5</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 76 received 3, divisor 1</span><br><span class="line">1&gt; 3</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (6&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 85 received 8, divisor 1</span><br><span class="line">6&gt; 8</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (9&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 88 received 11, divisor 1</span><br><span class="line">9&gt; 11</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (5&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 84 received 7, divisor 1</span><br><span class="line">5&gt; 7</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (11&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 90 received 1, divisor 1</span><br><span class="line">11&gt; 1</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (5&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 84 received 19, divisor 1</span><br><span class="line">5&gt; 19</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (10&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 89 received 12, divisor 1</span><br><span class="line">10&gt; 12</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (3&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 82 received 17, divisor 1</span><br><span class="line">3&gt; 17</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (4&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 83 received 18, divisor 1</span><br><span class="line">4&gt; 18</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (12&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 91 received 14, divisor 1</span><br><span class="line">12&gt; 14</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (11&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 90 received 13, divisor 1</span><br><span class="line">11&gt; 13</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 76, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (2&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 81 received 16, divisor 1</span><br><span class="line">2&gt; 16</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 76 received 15, divisor 2</span><br></pre></td></tr></table></figure></div><br> 只有id为76的线程收到了控制流中的2，并过滤了数据流中的数据15，而其他线程中的除数一直为1，没有过滤数据。</p><p> 因此，应将控制流的数据进行广播，将控制流数据源定义代码修改为如下内容：<br> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> DataStream&lt;Integer&gt; configStream = env.addSource(<span class="keyword">new</span> SourceFunction&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4529394264795596001L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Integer&gt; sourceContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sourceContext.collect(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).broadcast();</span><br></pre></td></tr></table></figure></div></p><p>再次运行后打印的信息如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (9&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 88 received 0, divisor 1</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (2&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 77, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (4&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 79, received 2</span><br><span class="line">9&gt; 0</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (7&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 86 received 10, divisor 1</span><br><span class="line">7&gt; 10</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 76 received 4, divisor 1</span><br><span class="line">1&gt; 4</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (7&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 86, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (12&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 91 received 3, divisor 1</span><br><span class="line">12&gt; 3</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 76, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (5&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 84 received 8, divisor 1</span><br><span class="line">5&gt; 8</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (1&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 76 received 16, divisor 2</span><br><span class="line">1&gt; 16</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (12&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 91, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (9&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 88, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (12&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 91 received 15, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (2&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 77 received 5, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (4&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 79 received 7, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (6&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 85 received 9, divisor 1</span><br><span class="line">6&gt; 9</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (11&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 90 received 2, divisor 1</span><br><span class="line">11&gt; 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (10&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 89 received 1, divisor 1</span><br><span class="line">10&gt; 1</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (8&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 87 received 11, divisor 1</span><br><span class="line">8&gt; 11</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (11&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 90, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (10&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 89, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (3&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 78, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (10&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 89 received 13, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (8&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 87, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (11&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 90 received 14, divisor 2</span><br><span class="line">11&gt; 14</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (2&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 77 received 17, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (6&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 85, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (9&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 88 received 12, divisor 2</span><br><span class="line">9&gt; 12</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (5&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Divisor] Thread 84, received 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (4&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 79 received 19, divisor 2</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (3&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 78 received 6, divisor 2</span><br><span class="line">3&gt; 6</span><br><span class="line">[Co-Process -&gt; Sink: Print to Std. Out (3&#x2F;12)] INFO test.flink.streaming.connectstream.Test2  - [Data] Thead 78 received 18, divisor 2</span><br><span class="line">3&gt; 18</span><br></pre></td></tr></table></figure></div><p>可见，每个线程都收到了控制流的数据2，如，id为91的线程，收到数据3时除数还是1,3被发出并打印了，接收到控制流中的除数2后，再接收到数据7时，就将奇数7过滤了。</p><h3><span id="23-完整代码">2.3  完整代码</span></h3> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> test.flink.streaming.connectstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.ConnectedStreams;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.CoProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.ConsoleAppender;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.PatternLayout;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName： Test2</span></span><br><span class="line"><span class="comment"> * Description：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 0x3E6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/25 9:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Logger root = Logger.getRootLogger();</span><br><span class="line">        root.setLevel(Level.INFO);</span><br><span class="line">        root.addAppender(<span class="keyword">new</span> ConsoleAppender(<span class="keyword">new</span> PatternLayout(<span class="string">"[%t] %p %c %x - %m%n"</span>)));</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="comment">//        env.setParallelism(1);</span></span><br><span class="line">        log.info(<span class="string">"Parallelism &#123;&#125;"</span>, env.getParallelism());</span><br><span class="line">        DataStream&lt;Integer&gt; configStream = env.addSource(<span class="keyword">new</span> SourceFunction&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4529394264795596001L</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Integer&gt; sourceContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                sourceContext.collect(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                running = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).broadcast();</span><br><span class="line">        DataStream&lt;Integer&gt; dataStream = env.addSource(<span class="keyword">new</span> SourceFunction&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1885959149409672550L</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Integer&gt; sourceContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; running &amp;&amp; i &lt; <span class="number">20</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">                    sourceContext.collect(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                running = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ConnectedStreams connectedStreams = dataStream.connect(configStream);</span><br><span class="line">        DataStream&lt;Integer&gt; resultStream = connectedStreams.process(<span class="keyword">new</span> CoProcessFunction&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8870659158532269705L</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Integer divisor = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement1</span><span class="params">(Integer o, Context context, Collector&lt;Integer&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">"[Data] Thead &#123;&#125; received &#123;&#125;, divisor &#123;&#125;"</span>, Thread.currentThread().getId(), o, divisor);</span><br><span class="line">                <span class="keyword">if</span> (o % divisor == <span class="number">0</span>) &#123;</span><br><span class="line">                    collector.collect(o);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement2</span><span class="params">(Integer o, Context context, Collector&lt;Integer&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">"[Divisor] Thread &#123;&#125;, received &#123;&#125;"</span>, Thread.currentThread().getId(), o);</span><br><span class="line">                divisor = o;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        resultStream.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2><span id="参考链接">参考链接</span></h2><ul><li><a href="https://www.cnblogs.com/littleCode/p/10362717.html" target="_blank" rel="noopener">Flink/Spark 如何实现动态更新作业配置</a></li><li><a href="http://www.54tianzhisheng.cn/2020/02/22/flink-nacos/" target="_blank" rel="noopener">Flink 整合 Nacos，让 Flink 作业配置动态更新不再是难事</a></li><li><a href="http://www.54tianzhisheng.cn/2020/02/23/flink-apollo/" target="_blank" rel="noopener">Flink 整合 Apollo，动态更新 Flink 作业配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      通过添加控制流的方式实现Flink任务配置的动态更新
    
    </summary>
    
    
    
      <category term="大数据" scheme="http://longwang.live/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Flink" scheme="http://longwang.live/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>一种处理Sqoop导出过程中数据的方法</title>
    <link href="http://longwang.live/2020/02/21/%E4%B8%80%E7%A7%8D%E5%A4%84%E7%90%86Sqoop%E5%AF%BC%E5%87%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://longwang.live/2020/02/21/%E4%B8%80%E7%A7%8D%E5%A4%84%E7%90%86Sqoop%E5%AF%BC%E5%87%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-21T09:14:11.000Z</published>
    <updated>2020-02-21T10:22:10.793Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="一-java代码调用sqoop-api导出数据">一、Java代码调用Sqoop API导出数据</span></h2><p>当前测试用大数据集群版本:cdh6.3.2，Sqoop依赖包的版本为1.4.7-cdh6.3.2。调用Sqoop API的Java代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.BasicConfigurator;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.Sqoop;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.mapreduce.hcat.SqoopHCatUtilities;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.tool.SqoopTool;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.util.OptionsFileUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 0x3E6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/02/05 20:58 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] getArgs() &#123;</span><br><span class="line">        String tb = <span class="string">"tb1"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"--connect"</span>, <span class="string">"jdbc:mysql://192.168.0.101:3306/test?useSSL=false"</span>,</span><br><span class="line">                <span class="string">"--username"</span>, <span class="string">"test"</span>,</span><br><span class="line">                <span class="string">"--password"</span>, <span class="string">"G00d!1uck"</span>,</span><br><span class="line">                <span class="string">"--table"</span>, tb,</span><br><span class="line">                <span class="string">"--hcatalog-database"</span>, <span class="string">"test"</span>,</span><br><span class="line">                <span class="string">"--hcatalog-table"</span>, tb</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execSqoop</span><span class="params">(String toolName, String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] expandArguments = OptionsFileUtil.expandArguments(args);</span><br><span class="line">        SqoopTool tool = SqoopTool.getTool(toolName);</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 以本地模式运行MapReduce程序，这样可以调试MapReduce的整个过程，连Mapper中的map方法都能调试</span></span><br><span class="line">        conf.set(<span class="string">"mapreduce.framework.name"</span>, <span class="string">"local"</span>);</span><br><span class="line">        conf.set(<span class="string">"custom.checkColumn"</span>, <span class="string">"id"</span>);</span><br><span class="line">        conf.set(<span class="string">"custom.lastValue"</span>, <span class="string">"2"</span>);</span><br><span class="line">        Configuration loadPlugins = SqoopTool.loadPlugins(conf);</span><br><span class="line">        Sqoop sqoop = <span class="keyword">new</span> Sqoop(tool, loadPlugins);</span><br><span class="line">        <span class="keyword">return</span> Sqoop.runSqoop(sqoop, expandArguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, execSqoop(<span class="string">"export"</span>, getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Logger.getRootLogger().setLevel(Level.INFO);</span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line">        System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"hdfs"</span>);</span><br><span class="line">        exportData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2><span id="二-部分导出过程分析">二、部分导出过程分析</span></h2><p>ExportTool中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void exportTable(SqoopOptions options, String tableName) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F; INSERT-based export.</span><br><span class="line">    &#x2F;&#x2F; 调用MySQLManager.exportTable</span><br><span class="line">      manager.exportTable(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>而MySQLManager的继承关系如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQLManager-&gt;InformationSchemaManager-&gt;CatalogQueryManager-&gt;GenericJdbcManager-&gt;SqlManager</span><br></pre></td></tr></table></figure></div><p>且只有SqlManager实现了exportTable方法，所以实际调用的SqlManager的exportTable方法:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Export data stored in HDFS into a table in a database.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public void exportTable(org.apache.sqoop.manager.ExportJobContext context)</span><br><span class="line">    throws IOException, ExportException &#123;</span><br><span class="line">  context.setConnManager(this);</span><br><span class="line">  JdbcExportJob exportJob &#x3D; new JdbcExportJob(context, getParquetJobConfigurator().createParquetExportJobConfigurator());</span><br><span class="line">  exportJob.runExport();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在exportJob.runExport方法中执行了配置MapReduce相关操作，由于JdbcExportJob继承了ExportJobBase且未重写runExport方法，所以实际调用的ExportJobBase中的runExport方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public void runExport() throws ExportException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    Job job &#x3D; createJob(conf);</span><br><span class="line">    try &#123;</span><br><span class="line">      &#x2F;&#x2F; Set the external jar to use for the job.</span><br><span class="line">      job.getConfiguration().set(&quot;mapred.jar&quot;, ormJarFile);</span><br><span class="line">      if (options.getMapreduceJobName() !&#x3D; null) &#123;</span><br><span class="line">        job.setJobName(options.getMapreduceJobName());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      propagateOptionsToJob(job);</span><br><span class="line">      if (isHCatJob) &#123;</span><br><span class="line">        LOG.info(&quot;Configuring HCatalog for export job&quot;);</span><br><span class="line">        SqoopHCatUtilities hCatUtils &#x3D; SqoopHCatUtilities.instance();</span><br><span class="line">        hCatUtils.configureHCat(options, job, cmgr, tableName,</span><br><span class="line">          job.getConfiguration());</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 使用hcatalog导出数据时，配置的InputFormat类为org.apache.sqoop.mapreduce.hcat.SqoopHCatExportFormat</span><br><span class="line">      configureInputFormat(job, tableName, tableClassName, null);</span><br><span class="line">      &#x2F;&#x2F; 从ExportJobBase的getOutputFormatClass方法获取，若不是batch模式则使用的OutPutFormat类为org.apache.sqoop.mapreduce.ExportOutputFormat</span><br><span class="line">      configureOutputFormat(job, tableName, tableClassName);</span><br><span class="line">      &#x2F;&#x2F; 当前this对象为JdbcExportJob，调用的ExportJobBase的configureMapper，</span><br><span class="line">      &#x2F;&#x2F; 其中调用JdbcExportJob中的getMapperClass方法，该方法中判断用了hcatalog则直接返回</span><br><span class="line">      &#x2F;&#x2F; SqoopHCatUtilities.getExportMapperClass()即org.apache.sqoop.mapreduce.hcat.SqoopHCatExportMapper</span><br><span class="line">      configureMapper(job, tableName, tableClassName);</span><br><span class="line">      configureNumTasks(job);</span><br><span class="line">      cacheJars(job, context.getConnManager());</span><br><span class="line"></span><br><span class="line">      jobSetup(job);</span><br><span class="line">      setJob(job);</span><br><span class="line">      boolean success &#x3D; runJob(job);</span><br><span class="line">      if (!success) &#123;</span><br><span class="line">        LOG.error(&quot;Export job failed!&quot;);</span><br><span class="line">        throw new ExportException(&quot;Export job failed!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (options.isValidationEnabled()) &#123;</span><br><span class="line">        validateExport(tableName, conf, job);</span><br><span class="line">      &#125;</span><br><span class="line">        ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2><span id="三-一种处理sqoop导出过程中数据的方法">三、一种处理Sqoop导出过程中数据的方法</span></h2><p>如上面runExport方法中注释所述，导出时配置的Mapper通过<code>SqoopHCatUtilities.getExportMapperClass()</code>获取，实际获取的是该工具类中的static变量<code>exportMapperClass</code>，该成员变量在<code>SqoopHCatUtilities</code>的static代码块中赋值为类<code>org.apache.sqoop.mapreduce.hcat.SqoopHCatExportMapper</code>，且整个导出过程都未修改，<code>SqoopHCatExportMapper</code>内容参考<a href="https://github.com/cloudera/sqoop/blob/cdh6.3.2/src/java/org/apache/sqoop/mapreduce/hcat/SqoopHCatExportMapper.java" target="_blank" rel="noopener">SqoopHCatExportMapper.java</a>。</p><p>因此，可在运行Sqoop命令之前，修改<code>SqoopHCatUtilities</code>的<code>exportMapperClass</code>的值，添加自定义逻辑，对导出的数据进行处理或过滤。</p><p>如，有一个打印导出过程中所有数据的需求（当然实际上肯定没有这么无聊的需求），将<code>SqoopHCatExportMapper</code>类拷出来，修改为如下内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hive.hcatalog.data.HCatRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.lib.SqoopRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.mapreduce.AutoProgressMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.sqoop.mapreduce.hcat.SqoopHCatExportHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A mapper that works on combined hcat splits.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifiedSqoopHCatExportMapper</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">AutoProgressMapper</span>&lt;<span class="title">WritableComparable</span>, <span class="title">HCatRecord</span>,</span></span><br><span class="line"><span class="class">                <span class="title">SqoopRecord</span>, <span class="title">WritableComparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Log LOG = LogFactory</span><br><span class="line">            .getLog(ModifiedSqoopHCatExportMapper<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">    <span class="keyword">private</span> SqoopHCatExportHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setup(context);</span><br><span class="line"></span><br><span class="line">        Configuration conf = context.getConfiguration();</span><br><span class="line">        helper = <span class="keyword">new</span> SqoopHCatExportHelper(conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(WritableComparable key, HCatRecord value,</span></span></span><br><span class="line"><span class="function"><span class="params">                    Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// value的class为org.apache.hive.hcatalog.data.DefaultHCatRecord</span></span><br><span class="line">        <span class="comment">// 继承链：org.apache.hive.hcatalog.data.DefaultHCatRecord-&gt;org.apache.hive.hcatalog.data.HCatRecord-&gt;java.lang.Object</span></span><br><span class="line">        <span class="comment">// Context中还可获取更多参数，如Configuration等。</span></span><br><span class="line">        SqoopRecord record = helper.convertToSqoopRecord(value);</span><br><span class="line">        LOG.info(<span class="string">"==="</span> + record.getFieldMap().toString() + <span class="string">"==="</span>);</span><br><span class="line">        context.write(record, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>主要就是在map方法中将数据打印出来。</p><p>再在前面的main方法中，调用导出数据的命令之前，设置修改后的Mapper：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Logger.getRootLogger().setLevel(Level.INFO);</span><br><span class="line">    BasicConfigurator.configure();</span><br><span class="line">    System.setProperty(<span class="string">"HADOOP_USER_NAME"</span>, <span class="string">"hdfs"</span>);</span><br><span class="line">    <span class="comment">// 指定Mapper为修改后的类</span></span><br><span class="line">    SqoopHCatUtilities.setExportMapperClass(ModifiedSqoopHCatExportMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    exportData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>日志中打印的数据如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">14587 [LocalJobRunner Map Task Executor #0] INFO blog.ModifiedSqoopHCatExportMapper  - &#x3D;&#x3D;&#x3D;&#123;s&#x3D;s3, id&#x3D;3, ft&#x3D;3.3&#125;&#x3D;&#x3D;&#x3D;</span><br><span class="line">14587 [LocalJobRunner Map Task Executor #0] INFO blog.ModifiedSqoopHCatExportMapper  - &#x3D;&#x3D;&#x3D;&#123;s&#x3D;s4, id&#x3D;4, ft&#x3D;4.4&#125;&#x3D;&#x3D;&#x3D;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><h2><span id="参考链接">参考链接</span></h2><ul><li><a href="https://github.com/cloudera/sqoop" target="_blank" rel="noopener">Cloudera Sqoop仓库</a></li><li><a href="http://sqoop.apache.org/docs/1.4.7/SqoopDevGuide.html" target="_blank" rel="noopener">Sqoop Developer’s Guide v1.4.7</a></li></ul>]]></content>
    
    <summary type="html">
    
      处理和过滤Sqoop导出数据的一种方法
    
    </summary>
    
    
    
      <category term="大数据" scheme="http://longwang.live/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Sqoop" scheme="http://longwang.live/tags/Sqoop/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://longwang.live/2020/01/14/hello-world/"/>
    <id>http://longwang.live/2020/01/14/hello-world/</id>
    <published>2020-01-14T13:07:18.176Z</published>
    <updated>2020-01-14T13:07:18.177Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
